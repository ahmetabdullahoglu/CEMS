# ===============================================
# CEMS - Currency Exchange Management System
# Docker Compose Configuration for Production
# ===============================================

version: '3.8'

networks:
  cems-network:
    driver: bridge
    name: cems-network

volumes:
  postgres_data:
    driver: local
    name: cems_postgres_data
  redis_data:
    driver: local
    name: cems_redis_data
  app_logs:
    driver: local
    name: cems_app_logs
  backup_data:
    driver: local
    name: cems_backup_data

services:
  # ==================== DATABASE SERVICE ====================
  postgres:
    image: postgres:15.5-alpine
    container_name: cems_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cems_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cems_password}
      POSTGRES_DB: ${POSTGRES_DB:-cems_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - backup_data:/backup
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - cems-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cems_user} -d ${POSTGRES_DB:-cems_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ==================== REDIS CACHE SERVICE ====================
  redis:
    image: redis:7.2-alpine
    container_name: cems_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-cems_redis_pass}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-cems_redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cems-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ==================== MAIN APPLICATION ====================
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: cems_app
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-cems_user}:${POSTGRES_PASSWORD:-cems_password}@postgres:5432/${POSTGRES_DB:-cems_db}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-cems_redis_pass}@redis:6379/0
      
      # Application Configuration
      APP_NAME: ${APP_NAME:-CEMS}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      DEBUG: ${DEBUG:-false}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # CORS
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["https://yourdomain.com"]}
      
      # Admin User
      FIRST_SUPERUSER: ${FIRST_SUPERUSER:-admin@cems.com}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD:-changeme123!}
      
      # Monitoring
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SENTRY_DSN: ${SENTRY_DSN:-}
      
    volumes:
      - app_logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "${APP_PORT:-8000}:8000"
    networks:
      - cems-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ==================== NGINX REVERSE PROXY ====================
  nginx:
    image: nginx:1.25-alpine
    container_name: cems_nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/cems.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/app/static:ro
      - app_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    networks:
      - cems-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # ==================== BACKGROUND WORKER ====================
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: cems_worker
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-cems_user}:${POSTGRES_PASSWORD:-cems_password}@postgres:5432/${POSTGRES_DB:-cems_db}
      
      # Redis Configuration (as broker)
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-cems_redis_pass}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-cems_redis_pass}@redis:6379/2
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - app_logs:/app/logs
    networks:
      - cems-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ==================== TASK SCHEDULER ====================
  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: cems_scheduler
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-cems_user}:${POSTGRES_PASSWORD:-cems_password}@postgres:5432/${POSTGRES_DB:-cems_db}
      
      # Redis Configuration
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-cems_redis_pass}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-cems_redis_pass}@redis:6379/2
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - app_logs:/app/logs
    networks:
      - cems-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# ==================== MONITORING SERVICES (Optional) ====================
# Uncomment below for production monitoring

  # # Prometheus Monitoring
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: cems_prometheus
  #   restart: unless-stopped
  #   volumes:
  #     - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - cems-network

  # # Grafana Dashboard
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: cems_grafana
  #   restart: unless-stopped
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - cems-network